 UdpClient receiverUdp = new UdpClient(5001);

        IPEndPoint ReceiveIpEndPoint = null;


 MovesAndDelegates player2moves = new MovesAndDelegates(this, player2);

            while (true)
            {
                // ќжидание дейтаграммы
                byte[] data = receiverUdp.Receive(ref ReceiveIpEndPoint);
                byte datrec = data[0];
                switch (datrec)
                {
                    case 1: player2moves.move_up(); break;
                    case 2: player2moves.move_down(); break;
                    case 3: player2moves.move_left(); break;
                    case 4: player2moves.move_right(); break;

                }

            }


 class MovesAndDelegates
    {
        delegate void Enemy_move();
        
        private Form form;
        private PictureBox player;
        
        
        public MovesAndDelegates(Form workform, PictureBox currentplayer ) {
            form = workform;
            player = currentplayer;
        
        }


        public void move_up()
        {
            if (form.InvokeRequired)
            {
                form.BeginInvoke(new Enemy_move(move_up));
                return;
            }
            else
            {
                player.Top -= 5;
            }
        }
        public void move_down()
        {
            if (form.InvokeRequired)
            {
                form.BeginInvoke(new Enemy_move(move_down));
                return;
            }
            else
            {
                player.Top += 5;
            }
        }
        public void move_left()
        {
            if (form.InvokeRequired)
            {
                form.BeginInvoke(new Enemy_move(move_left));
                return;
            }
            else
            {
                player.Left -= 5;
            }
        }
        public void move_right()
        {
            if (form.InvokeRequired)
            {
                form.BeginInvoke(new Enemy_move(move_right));
                return;
            }
            else
            {
                player.Left += 5;
            }
        }
    }
